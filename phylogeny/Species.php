<?php

class Species
{
	var $trait_list;
	var $trait_parented;
	var $trait_count;
	var $name;
	var $species_number;
	var $children;
	var $already_drawn;
	static $species_counter = 0;

	public function __construct($species_name, $list_of_traits)
	{
		$this->name = $species_name;
		$this->species_number = Species::$species_counter++;

		$this->trait_list = $list_of_traits;
		$this->trait_count = count($this->trait_list);

		$this->trait_parented = array();
		foreach ($this->trait_list as $idx => $trait_number) {
			$this->trait_parented[$trait_number] = 0;
		}

		$this->children = array();

		$this->already_drawn = false;
	}

	public function add_child(Species $child_node)
	{
		if (!in_array($child_node, $this->children))
			$this->children[] = $child_node;
	}

	public function contains(Species $other)
	{
		$intersection = array_intersect($other->trait_list, $this->trait_list);

		if (count($intersection) == $other->trait_count)
			return true;

		return false;
	}

	public function mark_traits(Species $parent)
	{
		$intersection = array_intersect($this->trait_list, $parent->trait_list);

		$unmarked_traits_marked = 0;
		foreach ($intersection as $idx => $trait_number) {
			if ($this->trait_parented[$trait_number] == 0) {
				$this->trait_parented[$trait_number] = 1;
				++$unmarked_traits_marked;
			}
		}
		return $unmarked_traits_marked;
	}

	public function count_unmarked()
	{
		$count = array_sum($this->trait_parented);
		return $this->trait_count - $count;
	}

	public function draw()
	{
		if ($this->already_drawn) return;

		# draw self
		print("node{$this->species_number} [label=\"{$this->name}\"];\n");
		$this->already_drawn = true;

		foreach ($this->children as $cn) {
			print("node{$this->species_number} -> node{$cn->species_number};\n");
			$cn->draw();
		}

	}
}

function cmp_species_objects(Species $a, Species $b)
{
	if ($a->trait_count == $b->trait_count)
		return -strcmp($a->name, $b->name);

	return ($a->trait_count < $b->trait_count) ? 1 : -1;
}

?>
