#!/usr/bin/env php
<?php
include("Species.php");


list($species_names, $traits) = read_traits($argv[1]);

$species_array = array();
foreach ($species_names as $idx => $name) {
	$new_species = new Species($name, $traits[$idx]);
	$species_array[] = $new_species;
}

if (usort($species_array, 'cmp_species_objects') === FALSE) {
	echo "Problem with sort\n";
	exit;
}

echo "/*\n";
print("Sorted species array:\n");
foreach ($species_array as $species) {
	print("Species named {$species->name} has {$species->trait_count} traits: ");
	$comma = '';
	foreach ($species->trait_list as $trait_number) {
		print($comma.$trait_number);
		$comma = ', ';
	}
	print("\n");
}

$root_species = array();

while (count($species_array) > 0) {
	$current_species = array_shift($species_array);
	print("Current species: {$current_species->name}\n");

	$added_as_child = false;

	foreach ($species_array as $next_species) {
		print("\tNext species: {$next_species->name}\n");
		if ($current_species->contains($next_species)) {
			print("\t\t{$current_species->name} contains all of {$next_species->name} traits.\n");
			$unmarked_traits_marked = $current_species->mark_traits($next_species);
			if ($unmarked_traits_marked > 0) {
				print("\t\tMarked $unmarked_traits_marked previously unmarked traits, adding as child\n");
				$next_species->add_child($current_species);
				$added_as_child = true;
			}
			$unmarked_traits = $current_species->count_unmarked();
			print("\t\t{$current_species->name} still needs to match $unmarked_traits traits.\n");
			if ($unmarked_traits == 1) break;
		}
	}

	if (!$added_as_child) {
		print("\t\t{$current_species->name} is a root species\n");
		$root_species[] = $current_species;
	}
}

echo "*/\n";
echo "digraph g {\n";
foreach ($root_species as $root) {
	$root->draw();
}
echo "}\n";


exit;

function read_traits($filename)
{
	$taxa_names = array();
	$M = array();
	$csv_handle = fopen($filename, "r");
	if ($csv_handle !== FALSE) {
		while (FALSE !== ($in = fgetcsv($csv_handle))) {
			if (substr($in[0], 0, 1) == '#') continue;
			$taxa_names[] = array_shift($in);
			$M[] = $in;

		}
	} else {
		print("Problem opening \"$filename\" for read\n");
		exit;
	}
	return array($taxa_names, $M);
}
