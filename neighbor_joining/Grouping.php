<?php
class GroupingImage {
	var $image;
	var $x_max;
	var $y_max;
	var $black;
	var $white;

	var $leaf_count;
	var $leaf_visited;
	var $largest_label_length;

	var $margin;
	var $font_size;
	var $vunit;
	var $uunit;

	public function __construct($h, $v, $leaf_cnt, $depth, $max_label_sz) {
		$this->x_max  = $h;
		$this->y_max  = $v;

		$this->image = imagecreate($this->x_max, $this->y_max);
		$this->white = imagecolorallocate($this->image, 220, 255, 255);
		$this->black = imagecolorallocate($this->image, 0, 0, 0);

		imagefill($this->image, 0, 0, $this->white);

		$this->leaf_count = $leaf_cnt;
		$this->leaf_visited = 0;

		$this->font_size = 4;
		$this->largest_label_length = $max_label_sz;
		$this->margin = 15;

		$this->vunit = intval(($this->y_max - 2*$this->margin)/($this->leaf_count - 1));

		// Pixels per X-axis unit.
		$this->uunit = intval(($this->x_max - 2*$this->margin- $this->largest_label_length*imagefontwidth($this->font_size))/$depth);
	}

	public function draw_leaf($label) {

		$y_pixels = $this->margin + $this->vunit * $this->leaf_visited;
		$y_return = $y_pixels;
		$y_pixels -= intval(imagefontheight($this->font_size)/2.0);

		$x_pixels = $this->x_max - $this->margin - imagefontwidth($this->font_size)*$this->largest_label_length;
		$x_return = $x_pixels;

		$len = strlen($label);
		for ($idx = 0; $idx < $len; ++$idx) {
			imagechar($this->image, $this->font_size, $x_pixels,  $y_pixels, $label[$idx], $this->black);
			$x_pixels += imagefontwidth($this->font_size);
		}

		++$this->leaf_visited;
		return array($x_return, $y_return);
	}

	public function draw_node($x1, $y1, $d1, $x2, $y2, $d2) {
		$x1_pixels = intval($x1 - $d1*$this->uunit);
		imageline($this->image,
			$x1_pixels, $y1,
			$x1, $y1,
			$this->black
		);
		$x2_pixels = intval($x2 - $d2*$this->uunit);
		imageline($this->image,
			$x2_pixels, $y2,
			$x2, $y2,
			$this->black
		);
		imageline($this->image,
			$x1_pixels, $y1,
			$x2_pixels, $y2,
			$this->black
		);

		// $x1_pixels and $x2_pixels should equate or
		// only differ by a small amount.
		$midpoint = intval(($y1+$y2)/2.0);
		return array($x1_pixels, $midpoint);
	}
}

class Grouping {
	var $element1; // Individual or another Grouping
	var $distance1;
	var $sum1;
	var $largest_label_length;

	var $element2; // Individual or another Grouping
	var $distance2;
	var $sum2;

	var $leafnode_sum;

	public function __construct() {

		$this->element1 = func_get_arg(0);
		if (is_object($this->element1)) {
			$this->leafnode_sum = $this->element1->leafnode_sum;
			$this->largest_label_length = $this->element1->largest_label_length;
		} else {
			$this->leafnode_sum = 1;
			$this->largest_label_length = strlen($this->element1);
		}

		if (func_num_args() > 1) {
			$this->element2 = func_get_arg(1);
			if (is_object($this->element2)) {
				$this->leafnode_sum += $this->element2->leafnode_sum;
				$this->largest_label_length = max($this->largest_label_length, $this->element2->largest_label_length);
			} else
				++$this->leafnode_sum;
		} else
			$this->element2 = null;

		if (func_num_args() > 2) {
			$dist = func_get_arg(2);
			$this->distance1 = $dist - $this->element1->sum1;
			$this->sum1 = $dist;

			if ($this->element2) {
				$this->distance2 = $dist - $this->element2->sum2;
				$this->sum2 = $dist;
			} else {
				$this->distance2 = 0;
				$this->sum2 = 0;
			}
		} else {
			$this->distance1 = 0;
			$this->distance2 = 0;
			$this->sum1 = 0;
			$this->sum2 = 0;
		}
	}

	public function stringrep() {
		$stringrep = '';
		if (isset($this->element2))
			$stringrep = '(';
		if (is_object($this->element1))
			$stringrep .= $this->element1->stringrep().':'.$this->distance1;
		else
			$stringrep .= $this->element1;

		if (isset($this->element2))
			$stringrep .= ','.$this->element2->stringrep().':'.$this->distance2.')';
		
		return $stringrep;
	}

	private function draw_group(GroupingImage $ctxt) {

		// $this->element1 always set, but not always an ojbect
		if (is_object($this->element1)) {
			list($el1_x, $el1_y) = $this->element1->draw_group($ctxt);

			// $this->element2 always set to non-null in this branch.
			if (is_object($this->element2)) {
				// Then $this consistutes an interior node.
				list($el2_x, $el2_y) = $this->element2->draw_group($ctxt);
			} else {
				list($el2_x, $el2_y) = $ctxt->draw_leaf($this->element2);
			}

			list($return_x, $return_y)
				= $ctxt->draw_node(
					$el1_x, $el1_y, $this->distance1,
					$el2_x, $el2_y, $this->distance2
				);

		} else {
			// If element1 doesn't have type of object, then $this constitutes
			// a leaf node.  It doesn't not have a value of $this->element2.
			list($return_x, $return_y) = $ctxt->draw_leaf($this->element1);
		}

		return array($return_x, $return_y);
	}

	public function draw_image($h, $v) {
		$ctxt = new GroupingImage($h, $v, $this->leafnode_sum, $this->sum1, $this->largest_label_length);
		$this->draw_group($ctxt);
		$img = $ctxt->image;
		$ctxt->image = NULL;
		return $img;
	}
};
?>
