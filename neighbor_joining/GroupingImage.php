<?php
class GroupingImage {
	var $image;
	var $x_max;
	var $y_max;
	var $black;
	var $white;

	var $leaf_count;
	var $leaf_visited;
	var $largest_label_length;

	var $margin;
	var $font_size;
	var $vunit;
	var $uunit;

	public function __construct($h, $v, $leaf_cnt, $depth, $max_label_sz) {
		$this->x_max  = $h;
		$this->y_max  = $v;

		$this->image = imagecreate($this->x_max, $this->y_max);
		$this->white = imagecolorallocate($this->image, 255, 255, 255);
		$this->black = imagecolorallocate($this->image, 0, 0, 0);

		imagefill($this->image, 0, 0, $this->white);

		$this->leaf_count = $leaf_cnt;
		$this->leaf_visited = 0;

		$this->font_size = 4;
		$this->largest_label_length = $max_label_sz;
		$this->margin = 15;

		$this->vunit = intval(($this->y_max - 2*$this->margin)/($this->leaf_count - 1));

		// Pixels per X-axis unit.
		$this->uunit = intval(($this->x_max - 2*$this->margin- $this->largest_label_length*imagefontwidth($this->font_size))/$depth);
print("Depth: $depth\n");
print("Max X: {$this->x_max}\n");
print("Pixels per X unit: {$this->uunit}\n");
	}

	public function draw_leaf($label, $x_units) {

		$y_pixels = $this->margin + $this->vunit * $this->leaf_visited;
		$y_return = $y_pixels;
		$y_pixels -= intval(imagefontheight($this->font_size)/2.0);

		$x_pixels = intval($this->uunit * $x_units) + $this->margin;
		$x_return = $x_pixels;
print("Draw leaf {$this->leaf_visited} \"{$label}\", at $x_return pixels, $x_units input units\n");

		$len = strlen($label);
		for ($idx = 0; $idx < $len; ++$idx) {
			imagechar($this->image, $this->font_size, $x_pixels,  $y_pixels, $label[$idx], $this->black);
			$x_pixels += imagefontwidth($this->font_size);
		}

		++$this->leaf_visited;
		return array($x_return, $y_return);
	}

	public function draw_root($x, $y) {
		imageline($this->image,
			$x, $y,
			$x - $this->margin/2.0, $y,
			$this->black
		);
	}

	public function draw_node($x1, $y1, $d1, $x2, $y2, $d2) {

		$x1_pixels = intval($x1 - $d1*$this->uunit);
		imageline($this->image,
			$x1_pixels, $y1,
			$x1, $y1,
			$this->black
		);
		$x2_pixels = intval($x2 - $d2*$this->uunit);
		imageline($this->image,
			$x2_pixels, $y2,
			$x2, $y2,
			$this->black
		);
		imageline($this->image,
			$x1_pixels, $y1,
			$x2_pixels, $y2,
			$this->black
		);

		// $x1_pixels and $x2_pixels should equate or
		// only differ by a small amount.
		$midpoint = intval(($y1+$y2)/2.0);
		return array($x1_pixels, $midpoint);
	}
}
