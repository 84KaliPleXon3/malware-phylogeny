<?php
abstract class Tree
{
	abstract public  function add_neighbor(Tree $n, $distance, $set_neighbor = 1);
	abstract public function construct_binary(BinaryTree $btparent, $dist);
	abstract public function traverse($fname);
	abstract public function get_label();

	var $visited;
	static $count = 0;
}
class InteriorNode extends Tree
{
	var $n1; var $dist1;
	var $n2; var $dist2;
	var $n3; var $dist3;

	public function __construct()
	{
		$this->n1 = null;
		$this->n2 = null;
		$this->n3 = null;
		$this->dist1 = null;
		$this->dist2 = null;
		$this->dist3 = null;

		$this->visited = FALSE;
		$this->serial_number = Tree::$count;
		++Tree::$count;
	}

	public function get_label()
	{
		return 'InteriorNode'.$this->serial_number;
	}

	public  function add_neighbor(Tree $n, $distance, $set_neighbor = 1)
	{
		if (!isset($this->n1)) {
			$this->n1 = $n;
			$this->dist1 = abs($distance);
		} else if (!isset($this->n2)) {
			$this->n2 = $n;
			$this->dist2 = abs($distance);
		} else if (!isset($this->n3)) {
			$this->n3 = $n;
			$this->dist3 = abs($distance);
		}

		if ($set_neighbor)
			$n->add_neighbor($this, $distance, 0);
	}

	public function traverse($fname)
	{
		$this->visited = TRUE;
		call_user_func($fname, $this);
		if (isset($this->n1)) {
			if (!$this->n1->visited) {
				$this->n1->traverse($fname);
			}
		}
		if (isset($this->n2)) {
			if (!$this->n2->visited) {
				$this->n2->traverse($fname);
			}
		}
		if (isset($this->n3)) {
			if (!$this->n3->visited) {
				$this->n3->traverse($fname);
			}
		}
		$this->visited = FALSE;
	}

	public function construct_binary(BinaryTree $btparent, $dist)
	{
		$this->visited = TRUE;

		$new_node = new BinaryTree();
		$new_node->label = $this->get_label();
		$btparent->set_child($new_node, $dist);

		if (isset($this->n1)) {
			if (!$this->n1->visited) {
				$this->n1->construct_binary($new_node, $this->dist1, $this);
			}
		}
		if (isset($this->n2)) {
			if (!$this->n2->visited) {
				$this->n2->construct_binary($new_node, $this->dist2, $this);
			}
		}
		if (isset($this->n3)) {
			if (!$this->n3->visited) {
				$this->n3->construct_binary($new_node, $this->dist3, $this);
			}
		}

		$this->visited = FALSE;
	}
}

class LeafNode extends Tree
{
	var $label;
	var $parnt;
	var $serial_number;
	public function __construct($string)
	{
		$this->label = $string;
		$this->parnt = null;
		$this->visited = FALSE;
		$this->serial_number = Tree::$count;
		++Tree::$count;
	}

	public function add_neighbor(Tree $n, $distance, $set_neighbor = 1)
	{
		$this->parnt = $n;
	}

	public function traverse($fname)
	{
		$this->visited = TRUE;
		call_user_func($fname, $this);
		if (!$this->parnt->visited)
			$this->parnt->traverse($fname);
		$this->visited = FALSE;
	}

	public function construct_binary(BinaryTree $btparent, $dist)
	{
		$this->visited = TRUE;
		$new_leaf = new BinaryTree();
		$new_leaf->label = $this->label;
		$btparent->set_child($new_leaf, $dist);
		$this->visited = FALSE;
	}

	public function get_label()
	{
		return 'LeafNode'.$this->label;
	}
}
?>
